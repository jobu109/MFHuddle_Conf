/**
 * Created by karaketsu on 14-8-27.
 */

navigator.getUserMedia = navigator.getUserMedia ||
    navigator.webkitGetUserMedia || navigator.mozGetUserMedia;


window.onbeforeunload = function(e) {
    hangup();
}

// HTML5 <video> elements
var localVideo = document.querySelector('#localVideo');
var remoteVideo = document.querySelector('#remoteVideo');

var isChannelReady = false;
var isInitiator = false;
var isStarted = false;

// WebRTC data structures
// Stream;
var localStream;
var remoteStream;
// PeerConnection
var pc;

var pc_config = {'iceServers':[{'url':'stun:stunserver.org'}]};

var pc_constraints = {
    'optional':[
        {'DtlsSrtpKeyAgreement': true}
    ]
};

var sdpConstraints = {};


var sendChannel, receiveChannel;
var sendButton = document.getElementById('sendButton');
var sendTextarea =  document.getElementById('dataChannelSend');
var receiveTextarea = document.getElementById('dataChannelReceive');


sendButton.onclick = sendData;

var room = prompt('Enter room name:');

var socket = io.connect('http://localhost:3000');

if (room !== '') {
    console.log('Create or join room', room);
    socket.emit('create or join', room);
}

var constraints = {video: true, audio: true};

function handleUserMedia(stream) {
    localStream = stream;
    attachMediaStream(localVideo, stream);
    console.log('Adding local stream');
    sendMessage('got user media');
}

function handleUserMediaError(error) {
    console.log('navigator.getUserMedia error: ', error);
}

socket.on('created', function(room) {
    console.log('Created room ' + room);
    isInitiator = true;

    navigator.getUserMedia(constraints, handleUserMedia, handleUserMediaError);
    console.log('Getting user media with constraints: ' + constraints);
    checkAndStart();
});

socket.on('join', function(room) {
    console.log('Another peer mad a request to join room ' + room);
    console.log('This peer is the initiator of room ' + room);
    isChannelReady = true;
});

socket.on('joined', function(room) {
    console.log('This peer has joined room ' + room);
    isChannelReady = true;

    navigator.getUserMedia(constraints, handleUserMedia, handleUserMediaError);
    console.log('Getting user media with constraints', constraints);
});

socket.on('message', function(msg) {
    console.log('Received message: ', msg);
    if (msg == 'got user media') {
        checkAndStart();
    } else if (msg.type == 'offer') {
        if (!isInitiator && !isStarted) {
            checkAndStart();
        }
        pc.setRemoteDescription(new RTCSessionDescription(msg));
        doAnswer();
    } else if (msg.type == 'answer' && isStarted) {
        pc.setRemoteDescription(new RTCSessionDescription(msg));
    } else if (msg.type == 'candidate' && isStarted) {
        var candidate = new RTCIceCandidate({sdpMLineIndex:msg.label,
            candidate:msg.candidate});
        pc.addIceCandidate(candidate);
    } else if (msg == 'bye' && isStarted) {
        handleRemoteHangup();
    }
});

function checkAndStart() {
    if (!isStarted && typeof localStream != 'undefined' && isChannelReady) {
        createPeerConnection();
        isStarted = true;
        if (isInitiator) {
            doCall();
        }
    }
}

function createPeerConnection() {
    try {
        pc = new RTCPeerConnection(pc_config, pc_constraints);
        pc.addStream(localStream);
        pc.onicecandidate = handleIceCandidate;
        console.log('Created RTCPeerConnection with:\n' +
            ' config: \'' + JSON.stringify(pc_config) + '\';\n' +
            ' constraints: \'' + JSON.stringify(pc_constraints) + '\'.');
    } catch (e) {
        cosole.log('Failed to create PeerConnection, exception: ' + e.message);
        alert('Cannot create RTCPeerConnection object.');
        return;
    }

    pc.onaddstream = handleRemoteStreamAdded;
    pc.onremovestream = handleRemoteStreamRemoved;

    if (isInitiator) {
        try {
            console.log('Created send data channel...');
            sendChannel = pc.createDataChannel("sendDataChannel", {reliable: true})
        } catch (e) {
            alert('Failed to create data channel...');
        }
        sendChannel.onopen = handleSendChannelStateChange;
        sendChannel.onmessage = handleMessage;
        sendChannel.onclose = handleSendChannelStateChange;
    } else {
        pc.ondatachannel = gotReceiveChannel;
    }
}

function doCall() {
    console.log('Creating Offer...');
    pc.createOffer(setLocalAndSendMessage, onSignalError, sdpConstraints);
}

function doAnswer() {
    console.log('Sending answer to peer...');
    pc.createAnswer(setLocalAndSendMessage, onSignalError, sdpConstraints);
}

function handleIceCandidate(event) {
    console.log('handleIceCandidate event: ', event);
    if (event.candidate) {
        sendMessage({
            type: 'candidate',
            label: event.candidate.sdpMLineIndex,
            id: event.candidate.sdpMid,
            candidate:event.candidate.candidate
        });
    } else {
        console.log('End of candidates.');
    }
}

function handleRemoteStreamAdded(event) {
    console.log('Remote stream added.');
    attachMediaStream(remoteVideo, event.stream);
    console.log('Remote stream attached.')
    remoteStream = event.stream;
}

function handleRemoteStreamRemoved(event) {
    console.log('Remote stream removed. Event: ', event);
}

function gotReceiveChannel(event) {
    console.log('Receive Channel Callback');
    receiveChannel = event.channel;
    receiveChannel.onmessage = handleMessage;
    receiveChannel.onopen = handleReceiveChannelStateChange;
    receiveChannel.onclose = handleReceiveChannelStateChange;
}

function sendData() {
    var data = sendTextarea.value;
    if(isInitiator) sendChannel.send(data);
    else receiveChannel.send(data);
    console.log('Send data: ', data);
}

function handleSendChannelStateChange() {
    var readyState = sendChannel.readyState;
    console.log('Send channel state is: ', readyState);
    if (readyState == 'open') {
        sendTextarea.disabled = false;
        sendTextarea.focus();
        sendTextarea.placeholder = "";
        sendButton.disabled = false;
    } else {
        sendTextarea.disabled = true;
        sendButton.disabled = true;
    }
}

function handleReceiveChannelStateChange() {
    var readyState = receiveChannel.readyState;
    console.log('Receive channel state is: ', readyState);
    if (readyState == 'open') {
        sendTextarea.disabled = false;
        sendTextarea.focus();
        sendTextarea.placeholder = "";
        sendButton.disabled = false;
    } else {
        sendTextarea.disabled = true;
        sendButton.disabled = true;
    }
}

function handleMessage(event) {
    console.log('Received message: ', event.data);
    receiveTextarea.value += event.data + '\n';
}

function setLocalAndSendMessage(sdp) {
    pc.setLocalDescription(sdp);
    sendMessage(sdp);
}

function onSignalError(error) {
    console.log('Failed to create signaling message: ' + error.name);
}

function sendMessage(msg) {
    console.log('Sending message: ', msg);
    socket.emit('message', {
        "channel": room,
        "message": msg
    });
}

function hangup() {
    console.log('Hanging up.');
    stop();
    sendMessage('bye');
}

function handleRemoteHangup() {
    console.log('Session terminated.');
    stop();
    isInitiator = false;
}

function stop() {
    isStarted = false;
    if (pc) pc.close();
}
