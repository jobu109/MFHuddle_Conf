import { Ch5Common } from "../ch5-common/ch5-common";
import { Ch5SignalElementAttributeRegistryEntries } from "../ch5-common/ch5-signal-attribute-registry";
import { TCh5VideoSwitcherSourceListPosition, TCh5VideoSwitcherScreenAspectRatio, TCh5VideoSwitcherContractSourceLabelType, TCh5VideoSwitcherContractScreenLabelType } from './interfaces/t-ch5-video-switcher';
import { ICh5VideoSwitcherAttributes } from './interfaces/i-ch5-video-switcher-attributes';
import { ICh5PropertySettings } from "../ch5-core/ch5-property";
import { Ch5Signal } from "../ch5-core";
export declare class Ch5VideoSwitcher extends Ch5Common implements ICh5VideoSwitcherAttributes {
    static readonly SOURCE_LIST_POSITION: TCh5VideoSwitcherSourceListPosition[];
    static readonly SCREEN_ASPECT_RATIO: TCh5VideoSwitcherScreenAspectRatio[];
    static readonly CONTRACT_SOURCE_LABEL_TYPE: TCh5VideoSwitcherContractSourceLabelType[];
    static readonly CONTRACT_SCREEN_LABEL_TYPE: TCh5VideoSwitcherContractScreenLabelType[];
    static readonly DEFAULT_SOURCE_ICON: string;
    static readonly COMPONENT_DATA: any;
    static readonly SIGNAL_ATTRIBUTE_TYPES: Ch5SignalElementAttributeRegistryEntries;
    static readonly COMPONENT_PROPERTIES: ICh5PropertySettings[];
    static readonly ELEMENT_NAME = "ch5-video-switcher";
    primaryCssClass: string;
    sourceListCssClass: string;
    screenListCssClass: string;
    screenListParentCssClass: string;
    static readonly SCROLLBAR_CLASSLIST_PREFIX: string;
    static readonly DISPLAY_SCREEN_LABEL: string;
    private _ch5Properties;
    private _elContainer;
    _sourceListContainer: HTMLElement;
    _screenListParentContainer: HTMLElement;
    _screenListContainer: HTMLElement;
    private _scrollbarContainer;
    private _scrollbar;
    private isDown;
    private startX;
    private startY;
    private scrollListLeft;
    private scrollListTop;
    private scrollbarDimension;
    private signalHolder;
    private numberOfScreenBackup;
    private signalHolderForSourceLabel;
    private signalHolderForScreenLabel;
    private signalNameOnContract;
    private validDrop;
    private resizeObserver;
    debounceNumberOfItems: (...args: any[]) => void;
    set sourceListPosition(value: TCh5VideoSwitcherSourceListPosition);
    get sourceListPosition(): TCh5VideoSwitcherSourceListPosition;
    set endless(value: boolean);
    get endless(): boolean;
    set numberOfSourceListDivisions(value: number);
    get numberOfSourceListDivisions(): number;
    set scrollbar(value: boolean);
    get scrollbar(): boolean;
    set numberOfSources(value: number);
    get numberOfSources(): number;
    set numberOfScreenColumns(value: number);
    get numberOfScreenColumns(): number;
    set indexId(value: string);
    get indexId(): string;
    set displayScreenLabel(value: boolean);
    get displayScreenLabel(): boolean;
    set screenAspectRatio(value: TCh5VideoSwitcherScreenAspectRatio);
    get screenAspectRatio(): TCh5VideoSwitcherScreenAspectRatio;
    set numberOfScreens(value: number);
    get numberOfScreens(): number;
    set sourceIconClass(value: string);
    get sourceIconClass(): string;
    set sourceIconUrl(value: string);
    get sourceIconUrl(): string;
    set sendEventOnDrop(value: string);
    get sendEventOnDrop(): string;
    set sendEventOnChange(value: string);
    get sendEventOnChange(): string;
    set receiveStateSourceChanged(value: string);
    get receiveStateSourceChanged(): string;
    set receiveStateSourceLabel(value: string);
    get receiveStateSourceLabel(): string;
    set receiveStateScriptSourceLabelHtml(value: string);
    get receiveStateScriptSourceLabelHtml(): string;
    set receiveStateScreenLabel(value: string);
    get receiveStateScreenLabel(): string;
    set receiveStateScriptScreenLabelHtml(value: string);
    get receiveStateScriptScreenLabelHtml(): string;
    set receiveStateNumberOfScreens(value: string);
    get receiveStateNumberOfScreens(): string;
    set contractName(value: string);
    get contractName(): string;
    set useContractForEnable(value: boolean);
    get useContractForEnable(): boolean;
    set useContractForShow(value: boolean);
    get useContractForShow(): boolean;
    set contractSourceLabelType(value: TCh5VideoSwitcherContractSourceLabelType);
    get contractSourceLabelType(): TCh5VideoSwitcherContractSourceLabelType;
    set contractScreenLabelType(value: TCh5VideoSwitcherContractScreenLabelType);
    get contractScreenLabelType(): TCh5VideoSwitcherContractScreenLabelType;
    static registerSignalAttributeTypes(): void;
    static registerCustomElement(): void;
    constructor();
    static get observedAttributes(): string[];
    attributeChangedCallback(attr: string, oldValue: string, newValue: string): void;
    connectedCallback(): void;
    private contractDefaultHelper;
    disconnectedCallback(): void;
    protected createInternalHtml(): void;
    protected initAttributes(): void;
    protected attachEventListeners(): void;
    private handleMouseDown;
    private handleMouseUpAndLeave;
    private handleMouseMove;
    protected removeEventListeners(): void;
    protected unsubscribeFromSignals(): void;
    private clearComponentContent;
    private checkInternalHTML;
    private handleSourceListPosition;
    private handleEndless;
    private handleNumberOfSourceListDivisions;
    private handleScrollbar;
    private handleDisplayScreenLabel;
    private handleScreenAspectRatio;
    private handleSendEventOnDrop;
    private handleSendEventOnChange;
    private handleReceiveStateSourceChanged;
    private getSignalName;
    private clearOldSubscriptionNumber;
    private clearOldSubscriptionString;
    setSignalByNumber(value: string): Ch5Signal<number> | null;
    private setSignalByString;
    private handleSourceLabel;
    private handleScreenLabel;
    private getSubscription;
    private sourcelabelHelper;
    private screenlabelHelper;
    private handleContractName;
    private handleScrollEvent;
    private endlessHelper;
    private initScrollbar;
    private updateCssClass;
    protected getTargetElementForCssClassesAndStyle(): HTMLElement;
    getCssClassDisabled(): string;
    private createSource;
    private createScreen;
    private resizeObserverHandler;
    private handleNumberOfScreenColumns;
    getRowHeightColWidth(colWidth: boolean | undefined, containerHeight: number, containerWidth: number, finalRowNumber: number, finalColNumber: number, aspectRatio: string): number;
    screenLabelHelperCreate(index: number, labelInnerHTML?: string): void;
    sourceLabelHelperCreate(index: number, labelInnerHTML?: string): void;
    private sourceIconHelperCreate;
    private screenAlignLabelHelperCreate;
    private handleDragStartSource;
    private handleDragEndSource;
    private handleDragoverScreen;
    private handleDropScreen;
    private addSourceToScreenOnFB;
    private addSourceToScreen;
    private handleResizeComponent;
    private handleDragStartForSourceOnScreen;
    private handleDragEndForSourceOnScreen;
    private clearSubscriptions;
    private setNumberOfItems;
    private replaceAll;
}
